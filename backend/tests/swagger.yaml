openapi: 3.0.0
info:
  title: Surat BRTS Complaint Management System (SBCMS) API
  description: API for managing complaints, users, announcements, and more in the Surat BRTS system.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - mobile
              properties:
                name:
                  type: string
                mobile:
                  type: string
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      sessionId:
                        type: string
                      message:
                        type: string
        '400':
          description: Validation error
        '500':
          description: Server error
  /auth/login:
    post:
      summary: Login user with OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mobile
                - otp
                - sessionId
              properties:
                mobile:
                  type: string
                otp:
                  type: string
                sessionId:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          mobile:
                            type: string
                          email:
                            type: string
                          points:
                            type: number
                          progress:
                            type: number
                          language:
                            type: string
        '400':
          description: Invalid OTP or validation error
        '404':
          description: User not found
        '500':
          description: Server error
  /auth/admin/login:
    post:
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Admin login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      admin:
                        type: object
                        properties:
                          id:
                            type: string
                          email:
                            type: string
                          name:
                            type: string
                          role:
                            type: string
                          permissions:
                            type: array
                            items:
                              type: string
        '400':
          description: Invalid credentials
        '500':
          description: Server error
  /complaints:
    post:
      summary: Create a new complaint (User)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                description:
                  type: string
                stop:
                  type: string
                dateTime:
                  type: string
                  format: date-time
                latitude:
                  type: number
                longitude:
                  type: number
                address:
                  type: string
                evidence:
                  type: array
                  items:
                    type: string
                    format: binary
                dynamicFields:
                  type: string
      responses:
        '200':
          description: Complaint created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      token:
                        type: string
                      status:
                        type: string
                      points:
                        type: number
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '500':
          description: Server error
    get:
      summary: Get all complaints (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
        - name: priority
          in: query
          schema:
            type: string
        - name: assignedTo
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of complaints
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
                    properties:
                      page:
                        type: number
                      limit:
                        type: number
                      total:
                        type: number
                      totalPages:
                        type: number
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
  /complaints/track/{token}:
    get:
      summary: Track complaint by token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Complaint details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      token:
                        type: string
                      type:
                        type: string
                      description:
                        type: string
                      stop:
                        type: string
                      status:
                        type: string
                      timeline:
                        type: array
                        items:
                          type: object
                      points:
                        type: number
                      createdAt:
                        type: string
        '404':
          description: Complaint not found
        '500':
          description: Server error
  /complaints/history:
    get:
      summary: Get user complaint history
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of complaints
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
                    properties:
                      page:
                        type: number
                      limit:
                        type: number
                      total:
                        type: number
                      totalPages:
                        type: number
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /complaints/{id}/approve:
    put:
      summary: Approve or reject complaint (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - description
              properties:
                status:
                  type: string
                  enum: [approved, rejected]
                reason:
                  type: string
                description:
                  type: string
                points:
                  type: number
      responses:
        '200':
          description: Complaint updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      complaint:
                        type: object
                      pointsAwarded:
                        type: number
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Complaint not found
        '500':
          description: Server error
  /withdrawals:
    post:
      summary: Create withdrawal request (User)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - points
                - method
                - paymentDetails
              properties:
                points:
                  type: number
                method:
                  type: string
                  enum: [UPI, Bank Transfer]
                paymentDetails:
                  type: object
                  properties:
                    upiId:
                      type: string
                    bankAccount:
                      type: string
                    ifsc:
                      type: string
                    accountHolderName:
                      type: string
      responses:
        '200':
          description: Withdrawal created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      status:
                        type: string
                      estimatedProcessingTime:
                        type: string
        '400':
          description: Insufficient points or validation error
        '401':
          description: Unauthorized
        '500':
          description: Server error
    get:
      summary: Get withdrawals (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of withdrawals
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
                    properties:
                      page:
                        type: number
                      limit:
                        type: number
                      total:
                        type: number
                      totalPages:
                        type: number
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
  /withdrawals/{id}/approve:
    put:
      summary: Approve or reject withdrawal (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [approved, rejected, processing]
                reason:
                  type: string
                description:
                  type: string
                transactionId:
                  type: string
      responses:
        '200':
          description: Withdrawal updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Withdrawal not found
        '500':
          description: Server error
  /announcements:
    post:
      summary: Create announcement (Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                image:
                  type: string
                  format: binary
                route:
                  type: string
                scheduledAt:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Announcement created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
    get:
      summary: Get announcements
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: route
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of announcements
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
                    properties:
                      page:
                        type: number
                      limit:
                        type: number
                      total:
                        type: number
                      totalPages:
                        type: number
        '500':
          description: Server error
  /announcements/{id}/like:
    post:
      summary: Like or unlike announcement (User)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      likes:
                        type: number
                      userLiked:
                        type: boolean
        '401':
          description: Unauthorized
        '404':
          description: Announcement not found
        '500':
          description: Server error
  /users:
    get:
      summary: Get users (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
                    properties:
                      page:
                        type: number
                      limit:
                        type: number
                      total:
                        type: number
                      totalPages:
                        type: number
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
  /users/{id}:
    get:
      summary: Get user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                      stats:
                        type: object
                        properties:
                          totalComplaints:
                            type: number
                          approvedComplaints:
                            type: number
                          totalPoints:
                            type: number
                          totalWithdrawals:
                            type: number
                          joinDate:
                            type: string
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: User not found
        '500':
          description: Server error
  /analytics/dashboard:
    get:
      summary: Get dashboard analytics (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: timeRange
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      complaints:
                        type: object
                      users:
                        type: object
                      system:
                        type: object
                      withdrawals:
                        type: object
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
  /config:
    get:
      summary: Get system configurations (Admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Configurations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
    put:
      summary: Update configuration (Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
                - value
              properties:
                key:
                  type: string
                value:
                  type: string
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                      updatedAt:
                        type: string
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
  /bus-stops:
    get:
      summary: Get bus stops (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: route
          in: query
          schema:
            type: string
        - name: enabled
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of bus stops
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
    post:
      summary: Create bus stop (Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - code
                - route
              properties:
                name:
                  type: string
                code:
                  type: string
                route:
                  type: string
                latitude:
                  type: number
                longitude:
                  type: number
                address:
                  type: string
      responses:
        '200':
          description: Bus stop created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '500':
          description: Server error
  /fcm/update-token:
    post:
      summary: Update FCM token (User)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - platform
              properties:
                token:
                  type: string
                platform:
                  type: string
                  enum: [web, android, ios]
      responses:
        '200':
          description: Token updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /fcm/send-to-user:
    post:
      summary: Send FCM notification to user (Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - title
                - body
              properties:
                userId:
                  type: string
                title:
                  type: string
                body:
                  type: string
                data:
                  type: object
      responses:
        '200':
          description: Notification sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      messageId:
                        type: string
                      sent:
                        type: boolean
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: User not found
        '500':
          description: Server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT